// @ts-check

import { readdirSync, writeFileSync, readFileSync } from 'fs';
import { join } from 'path';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import fbx from "fbx2gltf"

const __dirname = import.meta.dirname;

const hierarchy = {};
const animationsData = {};
const loader = new GLTFLoader();

const directories = readdirSync(join(__dirname), { withFileTypes: true })
  .filter(dirent => dirent.isDirectory())
  .map(dirent => dirent.name);

directories.forEach(directory => {
  const files = readdirSync(join(__dirname, directory), { withFileTypes: true })
    .filter(dirent => dirent.isFile())
    .map(dirent => dirent.name);

  files.forEach(file => {
    const filePath = join(__dirname, directory, file);

    const fileExtension = file.split('.').pop()?.toLowerCase();

    if (!fileExtension) {
      return;
    }

    hierarchy[directory] = hierarchy[directory] || [];

    if (fileExtension === 'fbx') {
      const outputFilePath = filePath.replace('.fbx', '.glb');
      fbx(filePath, outputFilePath);
    }

    const fileNameWithExtension = file.split(/\\\\|\//g).pop()?.replace('.fbx', '.glb');

    if (!fileNameWithExtension) {
      return
    }

    if (hierarchy[directory].includes(fileNameWithExtension)) {
      return
    }

    hierarchy[directory].push(fileNameWithExtension);
  });
});

const path = join(__dirname, '../../src/assets/3d/animations/_list.json')


// Extract animations from each .glb and build animations.json, _list.json, and index.ts using the same keys
console.log('Extracting animations from glb files...');
const newHierarchy = {};
const animationKeys = [];
for (const [dir, files] of Object.entries(hierarchy)) {
  for (const file of files) {
    const filePath = join(__dirname, dir, file);
    try {
      const buffer = readFileSync(filePath).buffer;
      const gltf = await new Promise((res, rej) => loader.parse(buffer, '', res, rej));
      for (const clip of gltf.animations) {
        // Compose the key as: subfolder/filename - mixamo.com (or other source if needed)
        // Use the filename (with .glb) and append ' - mixamo.com' for now
        const key = `${dir}/${file} - mixamo.com`;
        animationsData[key] = clip.toJSON();
        newHierarchy[dir] = newHierarchy[dir] || [];
        newHierarchy[dir].push(key);
        animationKeys.push(key);
      }
    } catch (e) {
      console.warn(`Failed to parse animations from ${filePath}:`, e);
    }
  }
}

// Write _list.json
console.log(`Writing hierarchy to ${path}`);
writeFileSync(path, JSON.stringify(newHierarchy, null, 2));

// Write animations.json
const animationsJsonPath = join(__dirname, '../../src/assets/3d/animations/animations.json');
console.log(`Writing animations to ${animationsJsonPath}`);
writeFileSync(animationsJsonPath, JSON.stringify(animationsData, null, 2));

// Write index.ts
const indexPath = join(__dirname, '../../src/assets/3d/animations/index.ts');
const sortedKeys = animationKeys.sort((a, b) => a.localeCompare(b));
const indexContent = `// Auto-generated by _generate.js. Do not edit.
export const animationKeys = [
${sortedKeys.map(name => `  "${name}",`).join('\n')}
] as const;

export type AnimationKey = typeof animationKeys[number];
`;
console.log(`Writing animation keys to ${indexPath}`);
writeFileSync(indexPath, indexContent);
